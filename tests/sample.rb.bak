#!/usr/bin/env ruby


class Worker
  def process(work)
    raise NotImplementedError, "This #{self.class} cannot respond to:"
  end
end

class MyWorker < Worker
  # This method is called by the Ractor to process the work
  # It should return a WorkResult object
  # If there is an error, it should raise an exception
  # The Ractor will catch the exception and send it back to the main thread
  def process(work)
    puts "Working on '#{work.inspect}'"

    if work.input == 5
      return WorkResult.new(error: "Error processing work #{work.input}", work: work)
    end

    calculated = work.input * 2
    WorkResult.new(result: calculated, work: work)
  end
end

class Work
  attr_reader :input
  def initialize(input)
    @input = input
  end

  def to_s
    "Work: #{@input}"
  end
end

class MyWork < Work
  def initialize(input)
    super
  end

  def to_s
    "MyWork: #{@input}"
  end
end

class WorkResult
  attr_reader :result, :error, :work
  def initialize(result: nil, error: nil, work: nil)
    @result = result
    @error = error
    @work = work
  end

  def success?
    !@error
  end

  def to_s
    if success?
      "Result: #{@result}"
    else
      "Error: #{@error}, Work: #{@work}"
    end
  end
end


class ResultAggregator
  attr_reader :results, :errors

  # This class is used to aggregate the results and errors from the Ractors
  # It will store the results and errors in separate arrays
  # It will also provide a method to print the results and errors
  def initialize
    @results = []
    @errors = []
  end

  def add_result(result)
    if result.success?
      puts "Work completed successfully: #{result}"
      @results << result
    else
      puts "Error processing work: #{result}"
      @errors << result
    end
  end

  def to_s
    "Results: #{@results.each(&:to_s).join(", ")}, Errors: #{@errors.each(&:to_s).join(", ")}"
  end

  def inspect
    {
      results: @results.map(&:to_s),
      errors: @errors.map(&:to_s)
    }
  end
end

class MyRactor
  def initialize(name)
    puts "Creating Ractor #{name}"
    @name = name
  end

  def start
    puts "Starting Ractor #{@name}"
    @ractor = Ractor.new(@name) do |name|
      puts "Ractor #{name} started"
      Ractor.yield({ type: :initialize, processor: name })
      worker = MyWorker.new

      loop do
        puts "Waiting for work in #{name}"
        work = Ractor.receive
        puts "Received work #{work} in #{name}"
        begin
          result = worker.process(work)
          puts "Sending result #{result} from Ractor #{name}"
          Ractor.yield({ type: :result, result: result })
        rescue StandardError => e
          puts "Error processing work #{work} in Ractor #{name}: #{e.message}"
          Ractor.yield({ type: :error, error: e.message, processor: name, work: work })
        end
      end
    end
  end

  def ractor
    @ractor
  end
end

class Supervisor
  # Removed failed_queue from attr_reader
  attr_reader :work_queue, :workers, :results

  def initialize(num_workers = 2)
    @work_queue = Queue.new
    @results = ResultAggregator.new
    # @failed_queue = Queue.new # Removed failed_queue
    @num_workers = num_workers
    @workers = []
    @total_work_count = 0 # Track total items initially added
    # @shutdown_requested = false # Removed shutdown flag
  end

  def add_work(items)
    items.each { |item| @work_queue << item }
    @total_work_count += items.size # Increment initial work count
    puts "Work added. Initial work count: #{@total_work_count}, Queue size: #{@work_queue.size}"
  end

  def start_workers
    @workers = (1..@num_workers).map do |i|
      MyRactor.new("worker #{i}")
    end
    @workers.each(&:start)
    puts "Workers started"
  end

  def setup_signal_handler
    # No need for Ractor.current here anymore
    # Need access to @workers within the trap block
    workers_ref = @workers
    Signal.trap("INT") do
      puts "\nCtrl+C received. Initiating immediate shutdown..."
      # Attempt to close worker Ractors before exiting
      puts "Attempting to close worker Ractors..."
      workers_ref.each do |w|
        begin
          # Check if ractor exists and is not closed
          if w && w.respond_to?(:ractor) && w.ractor && !w.ractor.closed?
             w.ractor.close
             puts "Closed Ractor: #{w.ractor}"
          end
        rescue => e # Catch potential errors during close
          puts "Error closing Ractor #{w.ractor rescue 'unknown'}: #{e.message}"
        end
      end
      puts "Exiting now."
      exit(1) # Exit immediately
    end
  end

  def run
    setup_signal_handler # Sets up the immediate exit trap
    start_workers

    # Removed the initial work distribution loop.
    # The main loop will handle sending work upon receiving :initialize message.

    # Main loop: Process events until the number of results equals the initial work count.
    # The signal trap handles immediate exit.
    while (@results.results.size + @results.errors.size) < @total_work_count
      processed_count = @results.results.size + @results.errors.size
      puts "Waiting for Ractor results. Processed: #{processed_count}/#{@total_work_count}, Queue size: #{@work_queue.size}"

      # Only select from worker ractors now
      ready_ractors = @workers.map(&:ractor).compact
      # Safety break if all workers somehow finished/closed unexpectedly AND no work left
      # This condition might need refinement depending on exact desired behavior if workers die.
      break if ready_ractors.empty? && @work_queue.empty? && processed_count < @total_work_count

      # Ractor.select will block until a worker sends a message
      # If ready_ractors is empty but loop continues, select would raise error. Added break above.
      next if ready_ractors.empty? # Skip iteration if no workers available but loop condition met (e.g., waiting for final results)

      ractor, completed_work = Ractor.select(*ready_ractors)

      puts "Selected Ractor returned: #{ractor}, completed work: #{completed_work}"

      # Process the received message
      case completed_work[:type]
      when :initialize
        puts "Initializing Ractor: #{completed_work[:processor]}"
        # Send work if available
        if !@work_queue.empty?
          queued_work = @work_queue.pop # Pop before sending
          puts "Sending initial work #{queued_work} to initialized Ractor: #{ractor}"
          ractor.send(MyWork.new(queued_work))
          puts "Initial work sent to #{completed_work[:processor]}."
        else
          puts "Work queue empty when Ractor #{completed_work[:processor]} initialized."
        end
      when :result
        puts "Completed work: #{completed_work[:result]} in Ractor: #{completed_work[:processor]}"
        @results.add_result(completed_work[:result])
        # No need to decrement a counter here, loop condition checks total results
        puts "Result processed. Total processed: #{@results.results.size + @results.errors.size}/#{@total_work_count}"
        puts "Results: #{@results.inspect}"
        # Call helper to send next work
        send_next_work_if_available(ractor)
      when :error
        error_result = WorkResult.new(error: completed_work[:error], work: completed_work[:work])
        puts "Error processing work #{error_result.work} in Ractor: #{completed_work[:processor]}: #{error_result.error}"
        # Removed adding to failed_queue
        @results.add_result(error_result) # This adds it to the errors array in the aggregator
        # No need to decrement a counter here, loop condition checks total results
        puts "Error handled. Total processed: #{@results.results.size + @results.errors.size}/#{@total_work_count}"
        # Removed Failed Queue size log
        puts "Results (including errors): #{@results.inspect}"
        # Call helper to send next work
        send_next_work_if_available(ractor)
      else
        # Log unknown message types from workers
        puts "Unknown message type received: #{completed_work[:type]} from #{ractor}"
      end
      # Loop continues based on the while condition at the top
    end

    # Removed DEBUG LOG for failed_queue

    # This part might not be reached if exit(1) is called in the trap
    puts "Main loop finished."
    puts "Final Results: #{@results.inspect}"
    # Removed Failed Work Queue size log
    # Optionally print failed items
    # until @failed_queue.empty?
    #   puts "Failed: #{@failed_queue.pop.inspect}"
    # end
  end

  private

  # Helper method to send next work item if available
  def send_next_work_if_available(ractor)
    # Ensure the ractor is valid before attempting to send
    # Ractor.select should only return active ractors, so closed? check is removed.
    unless ractor.nil?
      if !@work_queue.empty?
        queued_work = @work_queue.pop # Pop before sending
        puts "Sending next work #{queued_work} to Ractor: #{ractor}"
        ractor.send(MyWork.new(queued_work))
        puts "Work sent."
      else
        puts "Work queue empty. Not sending new work to Ractor #{ractor}."
      end
    else
      puts "Attempted to send work to an invalid or closed Ractor."
    end
  end
end

# --- Main Execution ---
if __FILE__ == $0
  supervisor = Supervisor.new(2) # Create supervisor with 2 workers

  # Add work items
  work_items = (1..10).to_a
  supervisor.add_work(work_items)

  # Run the supervisor
  supervisor.run

  puts "Processing complete."
  puts "Final Aggregated Results:"
  puts supervisor.results.inspect

  # Print failed items directly from the ResultAggregator's errors array
  failed_items = supervisor.results.errors # Access the errors array
  puts "\nFailed Work Items (#{failed_items.size}):"
  # Inspect each item individually for better readability if they are objects
  # The items are already WorkResult objects
  puts failed_items.map(&:inspect).inspect
end
